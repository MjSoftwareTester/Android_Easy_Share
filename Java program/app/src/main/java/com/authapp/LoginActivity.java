package com.authapp;import androidx.appcompat.app.AppCompatActivity;import android.app.ProgressDialog;import android.content.Intent;import android.content.SharedPreferences;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.authapp.API.APICall;import com.authapp.POJO.AllUser;import com.authapp.POJO.User;import java.util.ArrayList;import java.util.regex.Matcher;import java.util.regex.Pattern;public class LoginActivity extends AppCompatActivity implements View.OnClickListener {    private EditText editUserName, editPassword;    private LinearLayout btnLogin;    private TextView textRegister, textForgot;    private String susername, spassword;    private ArrayList<User> resultList;    private SharedPreferences sharedPreferences;    public static final String MyPREFERENCES = "MyPrefsAA";    public static final String Email = "emailKey";    public static final String Mobile = "mobileKey";    public static final String Name = "nameKey";    public static final String Login = "loginKey";    public static final String UserID = "UserIDKey";    public static final String UserImage = "UserImageKey";    public static final String LoginVerify = "UserVerifyKey";    public static final String UserOTP = "UserOTPKey";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_login);        sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);        String Login1 = sharedPreferences.getString(Login, "");        String UserVerify = sharedPreferences.getString(LoginVerify, "");        if (Login1.contains("Yes")) {            Log.d("Rittz", sharedPreferences.getString(UserOTP, ""));            if (UserVerify.contains("Yes")) {                Intent login = new Intent(LoginActivity.this, VerifyPINActivity.class);                login.putExtra("is_from", "home");                startActivity(login);                finish();            } else {                Intent login = new Intent(LoginActivity.this, VerificationActivity.class);                startActivity(login);                finish();            }        }        editUserName = (EditText) findViewById(R.id.etUserName);        editPassword = (EditText) findViewById(R.id.etPassword);        btnLogin = (LinearLayout) findViewById(R.id.btnLogin);        btnLogin.setOnClickListener(this);        textRegister = (TextView) findViewById(R.id.tvRegister);        textRegister.setOnClickListener(this);        textForgot = (TextView) findViewById(R.id.tvForgotPassword);        textForgot.setOnClickListener(this);        resultList = new ArrayList<User>();    }    @Override    public void onClick(View v) {        if (v == textRegister) {            Intent Register = new Intent(LoginActivity.this, UserRegisterActivity.class);            startActivity(Register);            //finish();        }        if (v == textForgot) {            Intent Register = new Intent(LoginActivity.this, ForgotPasswordActivity.class);            startActivity(Register);        }        if (v == btnLogin) {            susername = editUserName.getText().toString().trim();            spassword = editPassword.getText().toString().trim();            if (susername.equals("")) {                editUserName.setError("Enter Email/ Mobile");                return;            } else if (spassword.equals("")) {                editPassword.setError("Enter Password");                return;            }            else if (!isValidPassword(spassword.toCharArray())) {                editPassword.setError("Password length should be 8-20 and must contain character, number and any special character like # $ % ^ & + = ");                return;            }           else {                new PostLogin().execute();            }        }    }    // validating email id    private boolean isValidEmail(String email) {        String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"                + "[A-Za-z]+(\\.[A-Za-z]+)*(\\.[A-Za-z]{2,})$";        Pattern pattern = Pattern.compile(EMAIL_PATTERN);        Matcher matcher = pattern.matcher(email);        return matcher.matches();    }    public class PostLogin extends AsyncTask<Void, Void, AllUser> {        private ProgressDialog dialog;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialog = new ProgressDialog(LoginActivity.this);            dialog.setMessage("Please Wait..");            dialog.show();            dialog.setCancelable(false);        }        @Override        protected AllUser doInBackground(Void... voids) {            AllUser result = new AllUser();            result = new APICall().GetLogin(susername, spassword);            return result;        }        @Override        protected void onPostExecute(AllUser allUser) {            super.onPostExecute(allUser);            if (allUser != null) {                resultList.clear();                resultList.addAll(allUser.getData());                String result = resultList.get(0).getResult().toString().trim();                String msg = resultList.get(0).getMsg().toString().trim();                if (result.contains("No")) {                    if (msg.contains("Error")) {                        Toast.makeText(LoginActivity.this, "Invalid Email/Password", Toast.LENGTH_SHORT).show();                    } else if (msg.contains("NoData")) {                        Toast.makeText(LoginActivity.this, "Server Connection Error", Toast.LENGTH_SHORT).show();                    }                } else if (result.contains("Yes")) {                    String utype = resultList.get(0).getUser_type().toString().trim();                    String uid = resultList.get(0).getUser_id().toString().trim();                    String name = resultList.get(0).getName().toString().trim();                    String user_image = resultList.get(0).getUser_image().toString().trim();                    String mobile = resultList.get(0).getMobile().toString().trim();                    String email = resultList.get(0).getEmail().toString().trim();                    if (user_image == "") {                        user_image = "uploads/dp/default.png";                    }                    sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);                    SharedPreferences.Editor editor = sharedPreferences.edit();                    editor.putString(Login, "Yes");                    editor.putString(UserID, uid);                    editor.putString(Name, name);                    editor.putString(Mobile, mobile);                    editor.putString(Email, email);                    editor.putString(UserImage, user_image);                    editor.putString(LoginVerify, "No");                    editor.commit();                    Intent login = new Intent(LoginActivity.this, VerificationActivity.class);                    login.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(login);                    finish();                }            }            dialog.dismiss();        }    }    boolean isValidPassword(char[] pass) {        int letters = 0, digits = 0, specialChars = 0;        if (pass.length < 8 || pass.length > 20) {            return false;        }        for (int i = 0; i < pass.length; i++) {            char ch = pass[i];            if (Character.isLetter(ch)) {                letters++;            }            else if (Character.isDigit(ch)) {                digits++;            }            else if (isSpecialChar(ch)) {                specialChars++;            }            else if (Character.isWhitespace(ch)) {                return false;            }        }        return !(letters < 2 || digits < 1 || specialChars < 1);    }    static boolean isSpecialChar(char c) {        switch (c) {            case '@':            case '#':            case '$':            case '%':            case '^':            case '&':            case '+':            case '=':                return true;            default:                return false;        }    }}