package com.authapp;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import android.Manifest;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.authapp.API.APIResource;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import net.gotev.uploadservice.MultipartUploadRequest;import java.io.IOException;import java.util.UUID;import static com.authapp.LoginActivity.MyPREFERENCES;import static com.authapp.LoginActivity.UserID;import static com.authapp.LoginActivity.UserImage;public class UpdateDPActivity extends AppCompatActivity implements View.OnClickListener {    private ImageView imageDP;    private TextView textChoose;    private LinearLayout btnUpdate;    private SharedPreferences sharedPreferences;    private String uid, image;    //Image request code    private int PICK_REQUEST = 1;    //storage permission code    private static final int STORAGE_PERMISSION_CODE = 123;    private Uri filePath;    private Bitmap bitmap;    private String choosenimage;    private String filename1 = "";    private String utype;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_update_dp);        requestStoragePermission();        sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);        uid = sharedPreferences.getString(UserID, "");        image = sharedPreferences.getString(UserImage, "");        /*if(image == "")        {            image = "uploads/user_dp/default.png";        }*/        imageDP = (ImageView) findViewById(R.id.imgDP);        Glide.with(UpdateDPActivity.this)                .load(APIResource.BASE_URL + image)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .skipMemoryCache(true)                .into(imageDP);        textChoose = (TextView) findViewById(R.id.textChoose);        btnUpdate = (LinearLayout) findViewById(R.id.btnUpdate);        btnUpdate.setOnClickListener(this);        textChoose.setOnClickListener(this);    }    //Requesting permission    private void requestStoragePermission() {        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)            return;        if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {            //If the user has denied the permission previously your code will come to this block            //Here you can explain why you need this permission            //Explain here why you need this permission        }        //And finally ask for the permission        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, STORAGE_PERMISSION_CODE);    }    //This method will be called when the user will tap on allow or deny    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        //Checking the request code of our request        if (requestCode == STORAGE_PERMISSION_CODE) {            //If permission is granted            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                //Displaying a toast                Toast.makeText(this, "Permission granted now you can read the storage", Toast.LENGTH_LONG).show();            } else {                //Displaying another toast if permission is not granted                Toast.makeText(this, "Oops you just denied the permission", Toast.LENGTH_LONG).show();            }        }    }    @Override    public void onClick(View v) {        if (v == btnUpdate) {            uploadMultipart1();        }        if (v == textChoose) {            showFileChooser();        }    }    private void showFileChooser() {        Intent intent = new Intent();        //intent.setType("*/*");        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(intent, "Select File"), PICK_REQUEST);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (data != null) {            filePath = data.getData();            try {                bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), filePath);                String path = FilePath.getPath(this, filePath);                imageDP.setImageBitmap(bitmap);                //         Toast.makeText(AddNotificationActivity.this,path,Toast.LENGTH_SHORT).show();                //  uploadMultipart1();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public void uploadMultipart1() {        if (filePath == null) {            Toast.makeText(this, "Select File", Toast.LENGTH_SHORT).show();            return;        }        //getting the actual path of the image        String path = FilePath.getPath(this, filePath);        String extension = path.substring(path.lastIndexOf("."));        //   Toast.makeText(ShowDPActivity.this,extension,Toast.LENGTH_SHORT).show();        //Uploading code        try {            String uploadId = UUID.randomUUID().toString();            //Creating a multi part request            new MultipartUploadRequest(this, uploadId, APIResource.POST_IMAGE_URL)                    .addFileToUpload(path, "myFile") //Adding file                    .addParameter("user_id", uid) //Adding text parameter to the request                    .setMaxRetries(2)                    .startUpload(); //Starting the upload            sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);            SharedPreferences.Editor editor = sharedPreferences.edit();            editor.putString(UserImage, "uploads/dp/dp" + uid + extension);            Log.e("Rittz", "uploads/dp/dp" + uid + extension);            editor.commit();        } catch (Exception exc) {            Toast.makeText(this, "Rittz " + exc.getMessage(), Toast.LENGTH_SHORT).show();        }        choosenimage = "";        filePath = null;        Toast.makeText(this, "Updated", Toast.LENGTH_SHORT).show();        //Intent home = new Intent(UserImageActivity.this,UserHomeActivity.class);        //startActivity(home);        finish();    }}