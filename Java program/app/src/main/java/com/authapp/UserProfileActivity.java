package com.authapp;import androidx.appcompat.app.AppCompatActivity;import android.app.ProgressDialog;import android.content.Intent;import android.content.SharedPreferences;import android.os.AsyncTask;import android.os.Bundle;import android.view.View;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;import com.authapp.API.APICall;import com.authapp.POJO.AllUser;import com.authapp.POJO.User;import java.util.ArrayList;import java.util.regex.Matcher;import java.util.regex.Pattern;import static com.authapp.LoginActivity.Email;import static com.authapp.LoginActivity.Login;import static com.authapp.LoginActivity.Mobile;import static com.authapp.LoginActivity.MyPREFERENCES;import static com.authapp.LoginActivity.Name;import static com.authapp.LoginActivity.UserID;import static com.authapp.LoginActivity.UserImage;public class UserProfileActivity extends AppCompatActivity implements View.OnClickListener {    private EditText editName, editEmail, editMobile;    private LinearLayout btnRegister;    private String sname, semail, smobile, user_id;    private SharedPreferences sharedPreferences;    private ArrayList<User> resultList;    private String utype = "User";    private Bundle extra;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_user_profile);        sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);        editName = (EditText) findViewById(R.id.etName);        editEmail = (EditText) findViewById(R.id.etEmail);        editMobile = (EditText) findViewById(R.id.etMobile);        btnRegister = (LinearLayout) findViewById(R.id.btnRegister);        btnRegister.setOnClickListener(this);        resultList = new ArrayList<User>();        user_id = sharedPreferences.getString(UserID, "").trim();        if (!user_id.equals("")) {            new GetProfile().execute();        }    }    @Override    public void onClick(View v) {        if (v == btnRegister) {            sname = editName.getText().toString().trim();            semail = editEmail.getText().toString().trim();            smobile = editMobile.getText().toString().trim();            if (sname.equals("")) {                editName.setError("Enter Name");                return;            } else if (semail.equals("")) {                editEmail.setError("Enter Email");                return;            } else if (!isValidEmail(semail)) {                editEmail.setError("Enter Valid Email");                return;            } else if (smobile.equals("")) {                editMobile.setError("Enter Mobile");                return;            } else if (!isValidMobile(smobile)) {                editMobile.setError("Enter Valid Mobile");                return;            } else {                new PostUpdate().execute();            }        }    }    public class GetProfile extends AsyncTask<Void, Void, AllUser> {        private ProgressDialog dialog;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialog = new ProgressDialog(UserProfileActivity.this);            dialog.setMessage("Please Wait..");            dialog.show();            dialog.setCancelable(false);        }        @Override        protected AllUser doInBackground(Void... voids) {            AllUser result = new AllUser();            result = new APICall().GetProfile(user_id, "User");            return result;        }        @Override        protected void onPostExecute(AllUser allUser) {            super.onPostExecute(allUser);            if (allUser != null) {                resultList.clear();                resultList.addAll(allUser.getData());                String result = resultList.get(0).getResult().toString().trim();                String msg = resultList.get(0).getMsg().toString().trim();                if (result.contains("No")) {                    Toast.makeText(UserProfileActivity.this, "Server Connection Error", Toast.LENGTH_SHORT).show();                } else if (result.contains("Yes")) {                    String utype = resultList.get(0).getUser_type().toString().trim();                    if (utype.contains("User")) {                        String uid = resultList.get(0).getUser_id().toString().trim();                        String name = resultList.get(0).getName().toString().trim();                        String user_image = resultList.get(0).getUser_image().toString().trim();                        String mobile = resultList.get(0).getMobile().toString().trim();                        String email = resultList.get(0).getEmail().toString().trim();                        editName.setText(name);                        editMobile.setText(mobile);                        editEmail.setText(email);                    }                }            }            dialog.dismiss();        }    }    public class PostUpdate extends AsyncTask<Void, Void, AllUser> {        private ProgressDialog dialoug;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialoug = new ProgressDialog(UserProfileActivity.this);            dialoug.setMessage("Updating.. Please Wait..");            dialoug.show();            dialoug.setCancelable(false);        }        @Override        protected AllUser doInBackground(Void... voids) {            AllUser result = new AllUser();            result = new APICall().PostProfileUpdate(user_id, sname, semail, smobile);            return result;        }        @Override        protected void onPostExecute(AllUser allUser) {            super.onPostExecute(allUser);            if (allUser != null) {                resultList.clear();                resultList.addAll(allUser.getData());                String result = resultList.get(0).getResult().toString().trim();                String msg = resultList.get(0).getMsg().toString().trim();                //           Toast.makeText(RegisterActivity.this,result+"  " + msg,Toast.LENGTH_SHORT).show();                if (result.contains("No")) {                    if (msg.contains("Email")) {                        Toast.makeText(UserProfileActivity.this, "This Email is already Registered.", Toast.LENGTH_SHORT).show();                    } else if (msg.contains("Mobile")) {                        Toast.makeText(UserProfileActivity.this, "This Mobile is already Registered.", Toast.LENGTH_SHORT).show();                    } else if (msg.contains("NoData")) {                        Toast.makeText(UserProfileActivity.this, "Error in Server Connection.", Toast.LENGTH_SHORT).show();                    }                } else if (result.contains("Yes")) {                    if (msg.contains("Sucess")) {                        Toast.makeText(UserProfileActivity.this, "Profile Updated", Toast.LENGTH_LONG).show();                        String utype = resultList.get(0).getUser_type().toString().trim();                        if (utype.contains("User")) {                            String uid = resultList.get(0).getUser_id().toString().trim();                            String name = resultList.get(0).getName().toString().trim();                            String user_image = resultList.get(0).getUser_image().toString().trim();                            String mobile = resultList.get(0).getMobile().toString().trim();                            String email = resultList.get(0).getEmail().toString().trim();                            if (user_image == "") {                                user_image = "uploads/dp/default.png";                            }                            sharedPreferences = getSharedPreferences(MyPREFERENCES, MODE_PRIVATE);                            SharedPreferences.Editor editor = sharedPreferences.edit();                            editor.putString(Login, "Yes");                            editor.putString(UserID, uid);                            editor.putString(Name, name);                            editor.putString(Mobile, mobile);                            editor.putString(Email, email);                            editor.putString(UserImage, user_image);                            editor.commit();                            Intent login = new Intent(UserProfileActivity.this, HomePageActivity.class);                            login.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                            startActivity(login);                            finish();                        } else {                            Toast.makeText(UserProfileActivity.this, "Error in Server Connection.", Toast.LENGTH_SHORT).show();                        }                    }                }                dialoug.dismiss();            }        }    }    // validating email id    private boolean isValidEmail(String email) {        String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"                + "[A-Za-z]+(\\.[A-Za-z]+)*(\\.[A-Za-z]{2,})$";        Pattern pattern = Pattern.compile(EMAIL_PATTERN);        Matcher matcher = pattern.matcher(email);        return matcher.matches();    }    // validating mobile no    private boolean isValidMobile(String mobile) {        String Mobile_PATTERN = "[0-9]{10}";        Pattern pattern = Pattern.compile(Mobile_PATTERN);        Matcher matcher = pattern.matcher(mobile);        return matcher.matches();    }    // validating only Charater    private boolean isValidOnlyChar(String Char) {        String CHAR_PATTERN = "[a-zA-Z]+";        Pattern pattern = Pattern.compile(CHAR_PATTERN);        Matcher matcher = pattern.matcher(Char);        return matcher.matches();    }    // validating only Number    private boolean isValidOnlyNumber(String Char) {        String CHAR_PATTERN = "[0-9]+";        Pattern pattern = Pattern.compile(CHAR_PATTERN);        Matcher matcher = pattern.matcher(Char);        return matcher.matches();    }}